"""
sophie chou 2013

Parakeet is a text analysis funkit.
Given an input corpus, you can "parrot" the writing style.

"""
import sys
import re
from collections import defaultdict
from random import choice

class Parakeet:

    def __init__(self, corpus_path):
        self.corpus = open(corpus_path, 'r')
        self.tokens = self.tokenize()
        self.bigrams = self.get_bigrams()

    def tokenize(self):
        """Split text by space and punctuation"""
        body = self.corpus.read()
        tokens = re.findall(r"[\w']+|[.,!?;]", body)
        return tokens

    def get_bigrams(self):
        """Hash each word to its possible suffix words"""
        bigrams = defaultdict(list)
        for i in range(len(self.tokens) - 1):
            prefix = self.tokens[i]
            suffix = self.tokens[i + 1]
            bigrams[prefix].append(suffix)
        return bigrams

    def parrot(self, size):
        """Return text generated by Markov Babbler"""
        text = []
        startwords = [x for x in self.bigrams.keys() if x[0].isupper()]
        prefix = choice(startwords) #random start choice
        text.append(prefix)

        for i in range(size - 1):
            suffix = choice(self.bigrams[prefix])
            # random choice. theoretically if we hash duplicates
            # then more common words show up more.
            text.append(suffix)
            prefix = suffix

        string = self.format_string(text)
        return string

    @staticmethod
    def format_string(text):
        """Reformat the text to a nice readable string.
        Capitalize sentence beginnings,
        Remove space before punctuation."""

        string = " ".join(text)
        punct = ["?", "!", ".", ",", ";"] #newlines

        for p in punct:
            string = string.replace(" " + p, p)

        return string

